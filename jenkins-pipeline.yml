apiVersion: v1
kind: BuildConfig
metadata:
  name: witi-pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
            agent { label "maven" }
            stages {
                stage("Clone Source") {
                    steps {
                       checkout([$class: 'GitSCM',
                           branches: [[name: '*/master']],
                           extensions: [
                               [$class: 'RelativeTargetDirectory', relativeTargetDir: 'witi']
                           ],
                           userRemoteConfigs: [[url: 'https://bitbucket.org/tonyrhc/witi.git']]
                       ])
                    }
                }
                stage("Build JAR") {
                  steps {
                    dir('witi') {
                      sh 'mvn -Dmaven.test.skip=true clean package'
                    }
                  }
                }
                stage("Create Build For Spring Boot Server") {
                    steps {
                        dir('witi') {
                            sh 'oc new-build --strategy docker --binary --name witi || echo "Build already exists"'
                        }
                     }
                }
                stage("Build Spring Boot Server Image") {
                    steps {
                        dir('witi') {
                            sh 'cp Dockerfile-witi-server Dockerfile'
                            sh 'oc start-build witi --from-dir . --follow && rm Dockerfile'
                        }
                    }
                }
                stage("Create Build For Database Server") {
                    steps {
                        dir('witi') {
                            sh 'oc new-build --strategy docker --binary --name mysql || echo "Build already exists"'
                        }
                    }
                }
                stage("Build Database Image") {
                    steps {
                        dir('witi') {
                            sh 'cp Dockerfile-mysql Dockerfile'
                            sh 'oc start-build mysql --from-dir . --follow && rm Dockerfile'
                        }
                    }
                }
                stage("Create Build For React Server") {
                    steps {
                        dir('witi') {
                            sh 'oc new-build --strategy docker --binary --name react || echo "Build already exists"'
                        }
                    }
                }
                stage("Build React Image") {
                    steps {
                        dir('witi') {
                            sh 'cp Dockerfile-react Dockerfile'
                            sh 'oc start-build react --from-dir . --follow && rm Dockerfile'
                        }
                    }
                }
                stage("Create persistent storage") {
                    steps {
                        dir('witi') {
                            sh '(oc get PersistentVolumeClaim | grep mysql-claim0) || oc apply -f openshiftnew_backend/mysql-claim0-persistentvolumeclaim.yaml'
                        }
                    }
                }
                stage("Create Deployment Config") {
                    steps {
                        dir('witi') {
                            sh '(oc get deploymentconfig | grep mysql) || oc apply -f openshiftnew_backend/mysql-deploymentconfig.yaml'
                            sh '(oc get deploymentconfig | grep witi) || oc apply -f openshiftnew_backend/witi-deploymentconfig.yaml'
                            sh 'oc expose svc/witi || echo "witi already exposed"'


                            sh '(oc get deploymentconfig | grep react) || oc apply -f openshiftnew_frontend/react-deploymentconfig.yaml'
                            sh 'oc expose svc/react || echo "react already exposed"'



                        }
                    }
                }
                stage("Create Services and rollout deployment") {
                    steps {
                        dir('witi') {
                            sh '(oc get svc | grep mysql) || oc apply -f openshiftnew_backend/mysql-service.yaml'
                            sh '(oc get svc | grep witi) || oc apply -f openshiftnew_backend/witi-service.yaml'

                            sh '(oc get svc | grep react) || oc apply -f openshiftnew_frontend/react-service.yaml'
                        }
                    }
                }
                stage("Create Public route") {
                    steps {
                        dir('witi') {
                            sh '((oc get route | grep witi) && echo "witi already exposed witi") || oc expose svc/backend'
                            sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep witi`"'

                            sh '((oc get route | grep react) && echo "witi already exposed react") || oc expose svc/frontend'
                            sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep react`"'
                        }
                    }
                }
                stage("Clean up on Isle 4") {
                    steps {
                        dir('witi') {
                            sh 'oc delete pods `oc get pods | grep \'0/1\' | awk \'{print $1}\'`'
                        }
                    }
                }
          }
        }
  type: JenkinsPipeline
triggers: []
